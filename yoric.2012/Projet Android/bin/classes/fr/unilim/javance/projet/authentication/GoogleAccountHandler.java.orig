package fr.unilim.javance.projet.authentication;

import org.apache.http.Header;
import org.apache.http.HeaderElement;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpResponseException;

import android.accounts.Account;
import android.accounts.AccountManager;
import android.app.Activity;
import android.content.Intent;
import android.os.Bundle;
import android.util.Log;

public class GoogleAccountHandler {
    private static final String TAG = "GoogleAccountHandler";
	private final String AUTH_TOKEN_TYPE = "oauth2:https://www.googleapis.com/auth/tasks";
	private final int REQUEST_AUTHENTICATE = 0;
    public static final String ACCOUNT_TYPE = "com.google";

	private Activity activity;
	private String token;
	
	public GoogleAccountHandler(Activity activity) {
		this.activity = activity;
		
		this.gotAccount(false);
	}
	
	public static boolean haveAccount(Activity activity) {
	    AccountManager manager = AccountManager.get(activity);
	    Account account[] = manager.getAccountsByType(ACCOUNT_TYPE);
	    
	    if(account.length > 0) return true;
	    else return false;
	}
	
	public static boolean addAccount(Activity activity, String login, String password) {
		AccountManager manager = AccountManager.get(activity);
		
		final Account account = new Account(login, ACCOUNT_TYPE);
		manager.addAccountExplicitly(account, password, new Bundle());
		
		Account[] accounts = manager.getAccountsByType(ACCOUNT_TYPE);
		
		if(accounts.length > 0) {
			return true;
		}
		
		return false;
	}
	
	private void gotAccount(final AccountManager manager, final Account account) {
	    new Thread() {
	        @Override
	        public void run() {
	            try {
	    	        Log.e(TAG, "asking for a token");
	                final Bundle bundle = manager.getAuthToken(account, AUTH_TOKEN_TYPE, true, null, null).getResult();
	    	        Log.e(TAG, "token asked");
	                activity.runOnUiThread(new Runnable() {
	                    @Override
	                    public void run() {
	    	    	        Log.e(TAG, "running on ui thread");
	                        if (bundle.containsKey(AccountManager.KEY_INTENT)) {
	                            Intent intent = bundle.getParcelable(AccountManager.KEY_INTENT);
	                            int flags = intent.getFlags();
	                            flags &= ~Intent.FLAG_ACTIVITY_NEW_TASK;
	                            intent.setFlags(flags);
	                            activity.startActivityForResult(intent, REQUEST_AUTHENTICATE);
	                        } else if (bundle.containsKey(AccountManager.KEY_AUTHTOKEN)) {
	                            Log.e(TAG, bundle.getString(AccountManager.KEY_AUTHTOKEN));
	                            token = bundle.getString(AccountManager.KEY_AUTHTOKEN);
	                        }
	                    }

	                });
	            } catch (Exception e) {
	                handleException(e);
	            }
	        };
	    }.start();
	}
	
	private void gotAccount(boolean tokenExpired) {
        Log.e(TAG, "gotAccout 1");
	    AccountManager manager = AccountManager.get(this.activity);
	    Account account = manager.getAccountsByType(ACCOUNT_TYPE)[0];
	    
	    if (tokenExpired) {
	        Log.e(TAG, "token expired");
	        manager.invalidateAuthToken(ACCOUNT_TYPE, this.token);
	    }
	    
	    this.gotAccount(manager, account);
	}
	
	/*
	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
		super.onActivityResult(requestCode, resultCode, data);
		switch (requestCode) {
			case REQUEST_AUTHENTICATE:
				if (resultCode == RESULT_OK) {
					gotAccount(false);
				} else {
					//showDialog(DIALOG_ACCOUNTS);
				}
				break;
		}
	}
	/**/
	
	void handleException(Exception e) {
		e.printStackTrace();
		
		if (e instanceof HttpResponseException) {
			HttpResponse response = (HttpResponse) e;
			Header[] headers = response.getAllHeaders();
			HeaderElement[] he = headers[0].getElements();
			String statusCode = he[0].getParameterByName("status").getValue();
			
			if (statusCode == "401" || statusCode == "403") {
				gotAccount(true);
				return;
			}
			
			Log.e(TAG, "Auth request error - status : " + statusCode);
		}
		
		Log.e(TAG, e.getMessage(), e);
	}
}

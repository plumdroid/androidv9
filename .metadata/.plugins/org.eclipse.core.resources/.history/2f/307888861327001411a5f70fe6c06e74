package proto.camera.camera1;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

import android.app.Activity;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.hardware.Camera;
import android.hardware.Camera.PictureCallback;
import android.os.Bundle;
import android.os.Environment;
import android.util.Log;
import android.view.SurfaceHolder;
import android.view.SurfaceHolder.Callback;
import android.view.SurfaceView;
import android.view.View;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.Toast;

public class Camera1 extends Activity 
 implements SurfaceHolder.Callback,
 			View.OnClickListener,
 			PictureCallback{
	
	private Camera camera;
	
	private SurfaceView surfaceView;
	private ImageView imageView;
	
    /** Called when the activity is first created. */
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);
        
        openCamera();//démarrer la caméra
        
        //*** composant affichant l'image "live" de la camera
        surfaceView=(SurfaceView)findViewById(R.id.surfaceView);
        
        SurfaceHolder holder=surfaceView.getHolder();//Contrôleur SurfaceView
        
        holder.addCallback(this);//gestion des évènements  SurfaceHolder.CallBack
      
        // deprecated setting, but required on Android versions prior to 3.0
        holder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);

        holder.setFixedSize(400,300);//changer les dimensions du SurfaceView
        
        //** bouton de capture
        Button captureButton = (Button) findViewById(R.id.button_capture);
        captureButton.setOnClickListener(this);
           
    }
    
    //*** gestion des écouteurs
    
    public void onClick(View v) {
		// TODO Auto-generated method stub
    	camera.takePicture(null,null,this);
	}
  
    //*** Gestion de la caméra
    
    private boolean openCamera(){
    	boolean qOpened = false;
    	  
        try {
            closeCamera();
            camera = Camera.open();
            qOpened = (camera != null);
        } catch (Exception e) {
            Log.e(getString(R.string.app_name), "failed to open Camera");
            e.printStackTrace();
        }

        return qOpened;   
    }
    
    private void closeCamera() {
    	// Surface will be destroyed when we return, so stop the preview.
        if (camera != null) {
            // Call stopPreview() to stop updating the preview surface.
            camera.stopPreview();
            camera.release();
            
            camera=null;
        }
    }
    
    //Camera.pictureCallback. Sur capture de la photos. format jpeg
    public void onPictureTaken(byte[] data,Camera camera){
    	
    	//afficher l'image dans un BitmapView
    	Bitmap pictureTaken = BitmapFactory.decodeByteArray(data, 0,data.length);
    	
    	imageView=(ImageView)findViewById(R.id.imageView);
    	imageView.setImageBitmap(pictureTaken);
    
    	
    	// Mémoriser l'image 
    	
    	File mediaStorageDir = new File(Environment.getExternalStoragePublicDirectory(null).getPath() + 
    			File.separator + "trombinoscope");

    	//File mediaStorageDir1 = new File(Environment.getExternalStoragePublicDirectory(Environment.MEDIA_SHARED).getPath() + 
    		//	File.separator + "trombinoscope");
	    
    	File mediaStorageDir2 = new File(Environment.getExternalStoragePublicDirectory(
                Environment.DIRECTORY_PICTURES), "juju");// media de stockage hors mémoire du téléphone (par ex sdcard)
    	
	    
    	File mediaFile;// création du fichier .jpeg 
       // !!!
    	//mediaStorageDir=mediaStorageDir2;
    	mediaFile = new File(mediaStorageDir2.getPath() + File.separator + 
                           "2014_" + "thierryBogusz" + ".jpg");
    	if (! mediaStorageDir.exists()){
	        if (! mediaStorageDir.mkdirs()){

	            Log.d("MyCameraApp", "failed to create directory");
	            return;
	        }
	    }
    	
        try {
            FileOutputStream fos = new FileOutputStream(mediaFile);
            fos.write(data);
            fos.close();

        } catch (FileNotFoundException e) {
            Log.d("ERROR", "File not found: " + e.getMessage());
        } catch (IOException e) {
        	 Log.d("ERROR", "Error accessing file: " + e.getMessage());
        }
        
    	// Redémarrer la caméra
        
    	camera.startPreview();
    	/*			ContentValues contentValues = new ContentValues();
    				contentValues.put(Images.Media.TITLE, "image");

    				Uri uri = getContentResolver().insert(Media.EXTERNAL_CONTENT_URI,
    						contentValues);

    				OutputStream outputStream;
    				try {
    					outputStream = getContentResolver().openOutputStream(uri);
    					boolean compressed = pictureTaken.compress(
    							Bitmap.CompressFormat.JPEG, 20, outputStream);
    					Log.e(TAG, "picture successfully compressed at:" + uri
    							+ compressed);
    					outputStream.close();
    				} catch (FileNotFoundException e) {
    					// TODO Auto-generated catch block
    					e.printStackTrace();
    				} catch (IOException e) {
    					// TODO Auto-generated catch block
    					e.printStackTrace();
    				}*/

    }
        
    //*** Gestion de SurfaceHolder.CallBack
       
       /*
        * Indique à la caméra où afficher l'image
        */
        public void surfaceCreated(SurfaceHolder holder){
        	try {
                camera.setPreviewDisplay(holder);
                camera.startPreview();
            } catch (IOException e) {
                Log.d(getString(R.string.app_name), "Error setting camera preview: " + e.getMessage());
            }
        	Toast toast = Toast.makeText(getApplicationContext(),"create",Toast.LENGTH_SHORT);
      	    toast.show();
        	
        }
        
        public void surfaceChanged(SurfaceHolder holder, int format, int w, int h) {
            // Now that the size is known, set up the camera parameters and begin
            // the preview.
            /*Camera.Parameters parameters = camera.getParameters();
            parameters.setPreviewSize(surfaceViewSize.width, surfaceViewSize.height);
            requestLayout();
            camera.setParameters(parameters);*/

            // Important: Call startPreview() to start updating the preview surface.
            // Preview must be started before you can take a picture.
            camera.startPreview();
            Toast toast = Toast.makeText(getApplicationContext(),"change",Toast.LENGTH_SHORT);
      	    toast.show();
        }
        
        public void surfaceDestroyed(SurfaceHolder holder) {
            closeCamera();
        }


		
   
}